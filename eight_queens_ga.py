# -*- coding: utf-8 -*-
"""Eightqueens.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17nOnaRzAgzRyRwmXBd5eA8wKz5-W4oNa
"""

import random
import matplotlib.pyplot as plt

class population_individual:
  def __init__(self, indiv):
    self.indiv = indiv
    self.fitness = self.fitnessfunction()
    self.si = 2 
  def fitnessfunction(self) -> int:
    not_attacking = 0
    for i in range(len(self.indiv)):
        h = i - 1 
        j = i + 1
        right = left = 1
        while (h >= 0 or j < len(self.indiv)):
          if h>= 0 :
            if self.indiv[h] != self.indiv[i] and self.indiv[h] != self.indiv[i]-left and self.indiv[h] != self.indiv[i]+left :
              not_attacking += 1
            left += 1 
            h -= 1
          if j < len(self.indiv):
            if self.indiv[j] != self.indiv[i] and self.indiv[j] != self.indiv[i]-right and self.indiv[j] != self.indiv[i]+right :
              not_attacking += 1
            right += 1 
            j += 1
    not_attacking = not_attacking/2
    return not_attacking

def rotate(population):
  x = random.random()
  current = 0
  for individual in population:
    current += individual.si
    if current > x:
      return individual

def new_population(population):
  new_population = []
  while len(new_population) < PopulationSize:
    parent1 = rotate(population).indiv
    parent2 = rotate(population).indiv
    crossover = random.randint(0, 7)
    #crossover = 4
    child1 = parent1[:crossover] + parent2[crossover:]
    child2 = parent2[:crossover] + parent1[crossover:]
    mutation(child1)
    mutation(child2)
    new_population.append(population_individual(child1))
    new_population.append(population_individual(child2))
  sumfitness = sum(c.fitness for c in new_population)
  for individual in new_population:
    individual.si = individual.fitness / sumfitness
  avgfitness = sumfitness/PopulationSize
  return (new_population, avgfitness)

def mutation(child):
  if(random.random() < MutationPct):
    index = random.randint(0,7)
    child[index] = random.randint(1,8)
def myplot(numofgenerations, avgfitnessarray):
  plt.plot(numofgenerations, avgfitnessarray)
  plt.ylabel("Average fitness")
  plt.xlabel("Generation")
  plt.ylim(0,28)
  plt.tight_layout()
  plt.show()

#MutationPct any value between 0.0 and 1.0
MutationPct = 0.9
#PopulationSize 
PopulationSize = 1000
#Number of Iterations
NumIterations = 200
population = []

for i in range(PopulationSize):
  population.append(population_individual(random.sample(range(1,9),8)))
sumfitness = sum(c.fitness for c in population)
for individual in population:
  individual.si = individual.fitness / sumfitness
avgfitness = sumfitness/PopulationSize
print("Initial population")
for individual in population:
  print(individual.indiv, ' ', individual.fitness, ' ', individual.si)

count = 0
numofgenerations = [0]
avgfitnessarray = [avgfitness]

while count < NumIterations:
  count += 1
  numofgenerations.append(count)
  print("Iteration: ", count)
  
  (population, avgfitness) = new_population(population)
  avgfitnessarray.append(avgfitness)
  #print(avgfitness)

  for individual in population:
    if individual.fitness == 28:
      for elem in population:
        print(elem.indiv)
      print("Resolved: ", individual.indiv)
      myplot(numofgenerations, avgfitnessarray)
      exit(1)

print(count, " iterations completed")